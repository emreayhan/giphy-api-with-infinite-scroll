{"version":3,"sources":["components/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","loadItems","term","offset","setState","state","limit","isLoading","axios","get","params","q","rating","lang","then","response","nextItems","data","map","item","id","embed_url","url","hasMore","items","length","catch","err","error","message","handleChange","getItems","a","handleKeyDown","e","keyCode","totalCount","count","isNewItems","window","onscroll","debounce","innerHeight","document","documentElement","scrollTop","offsetHeight","this","className","type","value","onChange","target","icon","faSearch","onClick","style","margin","key","src","width","height","frameBorder","allowFullScreen","color","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dfffcb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce';\nimport './index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nclass Home extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\terror: false,\n\t\t\thasMore: true,\n\t\t\tisLoading: false,\n\t\t\titems: [],\n            term: 'ronaldo',\n            totalCount: null,\n            count:null,\n\t\t\tisNewItems:false,\n\t\t\toffset:0,\n\t\t\tlimit:25\n\n\t\t};\n\n\t\t// Binds our scroll event handler\n\t\twindow.onscroll = debounce(() => {\n\t\t\tconst { loadItems, state: { error, isLoading, hasMore } } = this;\n\n\t\t\t// Bails early if:\n\t\t\t// * there's an error\n\t\t\t// * it's already loading\n\t\t\t// * there's nothing left to load\n\t\t\tif (error || isLoading || !hasMore) return;\n\n\t\t\t// Checks that the page has scrolled to the bottom\n\t\t\tif (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n\t\t\t\tloadItems(this.state.term);\n\t\t\t}\n\t\t}, 100);\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.loadItems(this.state.term,this.state.offset);\n\t}\n\n\tloadItems = (term,offset) => {\n\t\tif(offset === 0) {\n\t\t\toffset = 0\n\t\t}else {\n\t\t\tthis.setState({offset :this.state.offset + this.state.limit})\n\t\t}\n\t\tthis.setState({ isLoading: true }, () => {\n\t\t\taxios\n\t\t\t\t.get(\n\t\t\t\t\t`https://api.giphy.com/v1/gifs/search?api_key=UpWTb2nKpObZivyMp6OnnKzs4y4S6KTi`,{\n\t\t\t\t\t\tparams:{\n\t\t\t\t\t\t\tq: term,\n\t\t\t\t\t\t\tlimit:this.state.limit,\n\t\t\t\t\t\t\toffset:this.state.offset,\n\t\t\t\t\t\t\trating:'G',\n\t\t\t\t\t\t\tlang:'en'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconst nextItems = response.data.data.map((item) => ({\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\tembed_url: item.embed_url,\n\t\t\t\t\t\turl: item.url\n\t\t\t\t\t}));\n\n\t\t\t\t\t// Merges the next items into our existing items\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\thasMore: this.state.items.length < 200,\n\t\t\t\t\t\tisLoading: false,\n\t\t\t\t\t\titems: [ ...this.state.items, ...nextItems ]\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\terror: err.message,\n\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\t};\n\n\n    \n\n    \n    handleChange = (term) => {\n        this.setState({term});\n\t}\n\n    getItems = async () => {\n        await this.loadItems(this.state.term,this.state.offset )\n\t};\n\t\n\thandleKeyDown = (e) => {\n\t\tif(e.keyCode===\"13\"){\n\t\t\tthis.getItems();\n\t\t}\n\t}\n\n\n\trender() {\n\t\t\n\t\tconst { error, hasMore, isLoading, items } = this.state;\n\t\t\treturn (\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<h1>GIPHY</h1>\n\t\t\t\t\t<div className=\"inputWithIcon\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={this.state.term} \n\t\t\t\t\t\t\tonChange={e => this.handleChange(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FontAwesomeIcon className=\"FontAwesomeIcon\" icon={faSearch} onClick={async () => {\n\t\t\t\t\t\t\tawait this.setState({items:[]})\n\t\t\t\t\t\t\tawait this.getItems()\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\n\t\t\t\t\t{items && <div className=\"list\">\n\t\t\t\t\t\t{items.map((item) => (\n\t\t\t\t\t\t\t<div style={{margin:\"10px\"}} key={item.id}>\n\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\tsrc={item.embed_url}\n\t\t\t\t\t\t\t\t\twidth=\"auto\"\n\t\t\t\t\t\t\t\t\theight=\"auto\"\n\t\t\t\t\t\t\t\t\tframeBorder=\"0\"\n\t\t\t\t\t\t\t\t\tclassName=\"giphy-embed\"\n\t\t\t\t\t\t\t\t\tallowFullScreen\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>}\n\t\t\t\t\t{!items && <div style={{color:\"white\"}}>Loading...</div>}\n\t\t\t\t\t<hr />\n\t\n\t\t\t\t\t{error && <div style={{ color: '#900' }}>{error}</div>}\n\t\t\t\t\t{isLoading && <div>Loading...</div>}\n\t\t\t\t\t{!hasMore && <div>You did it! You reached the end!</div>}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Home />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}